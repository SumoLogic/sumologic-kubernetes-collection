receivers:
  raw_k8s_events: {}
extensions:
  health_check: {}
{{- if .Values.otelevents.persistence.enabled }}
  file_storage:
    directory: /var/lib/storage/otc
    timeout: 10s
{{- end }}
  pprof: {}
exporters:
  sumologic:
    log_format: json
    json_logs:
      add_timestamp: true
      timestamp_key: timestamp
    endpoint: ${SUMO_ENDPOINT_DEFAULT_EVENTS_SOURCE}
    source_name: "%{_sourceName}"
    source_category: "%{_sourceCategory}"
    sending_queue:
      enabled: true
      persistent_storage_enabled: {{ .Values.otelevents.persistence.enabled }}
processors:
  memory_limiter:
    check_interval: 1s
    limit_percentage: 70
    spike_limit_percentage: 20
  batch:
    send_batch_size: 1024
    send_batch_max_size: 2_048
    timeout: 1s
  resource/add_cluster:
    attributes:
      - key: cluster
        value: {{ .Values.sumologic.clusterName | quote }}
        action: upsert
  source:
    collector: {{ .Values.sumologic.collectorName | default .Values.sumologic.clusterName | quote }}
    source_name: {{ .Values.fluentd.events.sourceName | quote}}
    source_category: {{ .Values.fluentd.events.sourceCategory | default (printf "%s/%s"  (include "sumologic.clusterNameReplaceSpaceWithDash" .) (.Values.fluentd.events.sourceName )) | quote}}
    source_category_prefix: ""
  sumologic_schema:
    add_cloud_namespace: false

service:
  telemetry:
    logs:
      level: {{ .Values.otelevents.logLevel }}
  extensions:
    - health_check
{{- if .Values.otelevents.persistence.enabled }}
    - file_storage
{{- end }}
    - pprof
  pipelines:
    logs/events:
      receivers:
        - raw_k8s_events
      processors:
        - memory_limiter
        - resource/add_cluster
        - source
        - sumologic_schema
        - batch
      exporters:
        - sumologic
