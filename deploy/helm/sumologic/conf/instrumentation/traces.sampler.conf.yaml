{{ if .Values.sumologic.traces.enabled }}
exporters:
{{- if eq .Values.debug.instrumentation.tracesSampler.print true }}
  debug:
    verbosity: detailed
{{- end }}

{{- if eq (include "sumologic-mock.forward-instrumentation" .) "true" }}
  otlphttp/sumologic-mock:
{{- if eq .Values.sumologic.traces.sourceType "http" }}
    traces_endpoint: {{ include "sumologic-mock.receiver-endpoint" . }}
{{- else }}
    endpoint: {{ include "sumologic-mock.receiver-endpoint" . }}
{{- end }}
    compression: gzip
{{- end }}

  otlphttp:
{{- if eq .Values.sumologic.traces.sourceType "http" }}
    traces_endpoint: ${SUMO_ENDPOINT_DEFAULT_TRACES_SOURCE}
{{- else }}
    endpoint: ${SUMO_ENDPOINT_DEFAULT_OTLP_TRACES_SOURCE}
{{- end}}
    compression: gzip
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"
processors:
  ## The memory_limiter processor is used to prevent out of memory situations on the collector.
  memory_limiter:
    ## check_interval is the time between measurements of memory usage for the
    ## purposes of avoiding going over the limits. Defaults to zero, so no
    ## checks will be performed. Values below 1 second are not recommended since
    ## it can result in unnecessary CPU consumption.
    check_interval: 5s

    ## Maximum amount of memory, in %, targeted to be allocated by the process heap.
    ## Note that typically the total memory usage of process will be about 50MiB higher
    ## than this value.
    limit_percentage: 75

    ## Maximum spike expected between the measurements of memory usage, in %.
    spike_limit_percentage: 20

  ## Smart cascading filtering rules with preset limits.
  ## Please see https://github.com/SumoLogic/sumologic-otel-collector/tree/v0.92.0-sumo-0/pkg/processor/cascadingfilterprocessor
  ## for details.
  cascading_filter:
    ## Max number of traces for which decisions are kept in memory
    num_traces: 200000

  ## The batch processor accepts spans and places them into batches grouped by node and resource
  batch:
    ## Number of spans after which a batch will be sent regardless of time
    send_batch_size: 256
    ## Never more than this many spans are being sent in a batch
    send_batch_max_size: 512
    ## Time duration after which a batch will be sent regardless of size
    timeout: 5s

extensions:
  health_check: {}
  memory_ballast:
    ## Memory Ballast size should be max 1/3 to 1/2 of memory.
    size_mib: 683
  pprof: {}
service:
  extensions: [health_check, memory_ballast, pprof]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, cascading_filter, batch]
      exporters:
        - otlphttp
{{- if eq (include "sumologic-mock.forward-instrumentation" .) "true" }}
        - otlphttp/sumologic-mock
{{- end }}
{{- if eq .Values.debug.instrumentation.tracesSampler.print true }}
        - debug
{{- end }}
  telemetry:
    logs:
      level: {{ .Values.tracesSampler.logLevel }}
{{- end }}
