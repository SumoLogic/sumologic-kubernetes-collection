filelog/containers:
  exclude:
    - /var/log/pods/{{ template "sumologic.namespace" . }}_{{ template "sumologic.labels.app.sumologic-mock.pod" . }}*/*/*.log
    {{- if eq .Values.debug.logs.metadata.stopLogsIngestion true   }}
    {{ include "logs.metadata.files.list" . }}
    {{- end }}
    {{- if eq .Values.debug.logs.collector.stopLogsIngestion true }}
    {{ include "logs.collector.files.list" . | nindent 4 }}
    {{- end }}
    {{- if eq .Values.debug.logs.otellogswindows.stopLogsIngestion true }}
    {{ include "logs.collector.windows.files.list" . | nindent 4 }}
    {{- end }}
    {{- if eq .Values.debug.metrics.metadata.stopLogsIngestion true }}
    {{ include "metrics.metadata.files.list" . }}
    {{- end }}
    {{- if eq .Values.debug.metrics.collector.stopLogsIngestion true }}
    {{ include "metrics.collector.files.list" . }}
    {{- end }}
    {{- if eq .Values.debug.instrumentation.otelcolInstrumentation.stopLogsIngestion true }}
    {{ include "otelcolInstrumentation.collector.files.list" . }}
    {{- end }}
    {{- if eq .Values.debug.instrumentation.tracesGateway.stopLogsIngestion true }}
    {{ include "tracesGateway.collector.files.list" . }}
    {{- end }}
    {{- if eq .Values.debug.instrumentation.tracesSampler.stopLogsIngestion true }}
    {{ include "tracesSampler.collector.files.list" . }}
    {{- end }}
    {{- if eq .Values.debug.events.stopLogsIngestion true }}
    {{ include "events.collector.files.list" . }}
    {{- end }}

{{ if lt (int (include "kubernetes.minor" .)) 24 }}
  ## sets fingerprint_size to 17kb in order to match the longest possible docker line (which by default is 16kb)
  ## we want to include timestamp, which is at the end of the line
  ## Not necessary in 1.24 and later, as docker-shim is not present anymore
  fingerprint_size: 17408
{{ end }}
  include:
    - /var/log/pods/*/*/*.log
  include_file_name: false
  include_file_path: true
  operators:
    ## Parse the container runtime log format automatically
    - type: container
      add_metadata_from_filepath: true
    
    ## Reorganise attributes according to Sumo Logic requirements
    ## - rename log.iostream to stream
    - type: move
      from: resource["log.iostream"]
      to: resource["stream"]
    - type: move
      from: resource["time"]
      to: attributes["time"]
    ## Keep only the following attributes:
    ## - stream
    ## - k8s.pod.name
    ## - k8s.container.name
    ## - k8s.namespace.name
    ## - log.file.path
    ## - time if `sumologic.logs.container.keep_time_attribute` is set to `true`
    - type: retain
      id: keep-fields
      fields:
        - resource["stream"]
        - resource["k8s.pod.name"]
        - resource["k8s.container.name"]
        - resource["k8s.namespace.name"]
        - attributes["log.file.path"]
{{ if .Values.sumologic.logs.container.keep_time_attribute }}
        - attributes["time"]
{{ end }}

    ## Strip trailing "\n" from the log body
    - id: strip-trailing-newline-router
{{- if .Values.sumologic.logs.multiline.enabled }}
      default: multiline
{{- else }}
      default: merge-multiline-logs
{{- end }}
      routes:
        - expr: body matches "^.*\n$"
          output: strip-trailing-newline
      type: router

    ## strip-trailing-newline removes the trailing "\n" from the `log` key. This is required for logs coming from Docker container runtime.
    ## Uses attributes.log as temporary cotainer for new log
    ## Input Body (JSON): { "log": "2001-02-03 04:05:06 very long line that was split by the logging driver\n", "stream": "stdout" }
    ## Output Body (JSON): { "log": "2001-02-03 04:05:06 very long line that was split by the logging driver", "stream": "stdout" }
    - id: strip-trailing-newline
      parse_from: body
      parse_to: attributes
      output: replace-body
      regex: "^(?P<log>.*)\n$"
      type: regex_parser

    - id: replace-body
      type: move
      from: attributes.log
      to: body

{{- if .Values.sumologic.logs.multiline.enabled }}
    ## Perform multiline detection
    - id: multiline
      default: merge-multiline-logs
      routes:
{{- range $i, $config := .Values.sumologic.logs.multiline.additional }}
        - expr: {{ $config.condition | quote}}
          output: {{ printf "merge-multiline-logs-%d" $i }}
{{- end }}
      type: router

{{- range $i, $config := .Values.sumologic.logs.multiline.additional }}
    - id: {{ printf "merge-multiline-logs-%d" $i }}
      combine_field: body
      combine_with: "\n"
      is_first_entry: {{ printf "body matches %s" ($config.first_line_regex | quote) | quote }}
      source_identifier: attributes["log.file.path"]
      output: clean-up-log-file-path
      type: recombine
      max_unmatched_batch_size: 1
{{- end }}

    ## merge-multiline-logs merges incoming log records into multiline logs.
    ## Input Body (JSON): { "log": "2001-02-03 04:05:06 first line\n", "stream": "stdout" }
    ## Input Body (JSON): { "log": "  second line\n", "stream": "stdout" }
    ## Input Body (JSON): { "log": "  third line\n", "stream": "stdout" }
    ## Output Body (JSON): { "log": "2001-02-03 04:05:06 first line\n  second line\n  third line\n", "stream": "stdout" }
    - id: merge-multiline-logs
      combine_field: body
      combine_with: "\n"
      is_first_entry: {{ printf "body matches %s" (.Values.sumologic.logs.multiline.first_line_regex | quote) | quote }}
      source_identifier: attributes["log.file.path"]
      output: clean-up-log-file-path
      type: recombine
      max_unmatched_batch_size: 1
{{- end }}

    - field: attributes["log.file.path"]
      id: clean-up-log-file-path
      type: remove

  storage: file_storage
