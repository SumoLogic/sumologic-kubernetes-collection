{{ if .Values.fluentd.logs.containers.overrideRawConfig }}
{{ .Values.fluentd.logs.containers.overrideRawConfig | nindent 2}}
{{- else}}
<filter containers.**>
  @type record_transformer
  enable_ruby
  renew_record true
  <record>
    log    ${record["log"].split(/[\n\t]+/).map! {|item| JSON.parse(item)["log"]}.any? ? record["log"].split(/[\n\t]+/).map! {|item| JSON.parse(item)["log"]}.join("") : record["log"] rescue record["log"]}
    stream ${[record["log"].split(/[\n\t]+/)[0]].map! {|item| JSON.parse(item)["stream"]}.any? ? [record["log"].split(/[\n\t]+/)[0]].map! {|item| JSON.parse(item)["stream"]}.join("") : record["stream"] rescue record["stream"]}
    time   ${[record["log"].split(/[\n\t]+/)[0]].map! {|item| JSON.parse(item)["time"]}.any? ? [record["log"].split(/[\n\t]+/)[0]].map! {|item| JSON.parse(item)["time"]}.join("") : record["time"] rescue record["time"]}
  </record>
</filter>
# match all  container logs and label them @NORMAL
<match containers.**>
  @type relabel
  @label @NORMAL
</match>
<label @NORMAL>
  #  only match fluentd logs based on fluentd container name. by default, this is
  #  <filter **collection-sumologic**>
{{ if .Values.fluentd.logLevelFilter }}
  {{ printf "<filter **%s**>" (include "sumologic.fullname" .) }}
    # only ingest fluentd logs of levels: {error, fatal} and warning messages if buffer is full
    @type grep
    <regexp>
      key log
      pattern /\[error\]|\[fatal\]|drop_oldest_chunk|retry succeeded/
    </regexp>
  </filter>
{{- end}}
  # third-party kubernetes metadata  filter plugin
  <filter containers.**>
    @type kubernetes_metadata
    @log_level {{ .Values.fluentd.metadata.pluginLogLevel }}
    @include logs.kubernetes.metadata.filter.conf
  </filter>
  # sumologic kubernetes metadata enrichment filter plugin
  <filter containers.**>
    @type enhance_k8s_metadata
    @log_level {{ .Values.fluentd.metadata.pluginLogLevel }}
    @include logs.enhance.k8s.metadata.filter.conf
  </filter>
{{- .Values.fluentd.logs.containers.extraFilterPluginConf | nindent 4 }}
  # kubernetes sumologic filter plugin
  <filter containers.**>
    @type kubernetes_sumologic
    @include logs.kubernetes.sumologic.filter.conf
  </filter>
  {{ if .Values.fluentd.logs.containers.overrideOutputConf }}
  {{ .Values.fluentd.logs.containers.overrideOutputConf | nindent 4 }}
  {{- else}}
  <match containers.**>
    @type sumologic
    @id sumologic.endpoint.logs
    sumo_client {{ include "sumologic.sumo_client" . | quote }}
    @log_level {{ .Values.fluentd.logs.output.pluginLogLevel }}
{{- .Values.fluentd.logs.containers.outputConf | nindent 6 }}
    <buffer>
      {{- if or .Values.fluentd.persistence.enabled (eq .Values.fluentd.buffer.type "file") }}
      @type file
      path {{ .Values.fluentd.buffer.filePaths.logs.containers }}
      {{- else }}
      @type memory
      {{- end }}
      @include buffer.output.conf
    </buffer>
  </match>
  {{- end}}
</label>
{{- end}}
