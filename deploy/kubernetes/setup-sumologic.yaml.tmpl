# This file is auto-generated.
---
# Source: sumologic/templates/setup/setup-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name:  collection-sumologic-setup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "2"
    
  labels:
    app: collection-sumologic
    
data:
  setup.sh: |-
    #!/bin/sh
    cp /etc/terraform/sumo-k8s.tf /terraform
    cd /terraform
  
    # Fix URL to remove "v1" or "v1/"
    export SUMOLOGIC_BASE_URL=${SUMOLOGIC_BASE_URL%v1*}
  
    # Support proxy for terraform
    export HTTP_PROXY=${HTTP_PROXY:=""}
    export HTTPS_PROXY=${HTTPS_PROXY:=""}
  
    COLLECTOR_NAME="$COLLECTOR_NAME"
  
    terraform init
  
    # Sumo Collector and HTTP sources
    terraform import sumologic_collector.collector "$COLLECTOR_NAME"
    
    terraform import sumologic_http_source.apiserver_metrics_source "$COLLECTOR_NAME/apiserver-metrics"
    terraform import sumologic_http_source.control_plane_metrics_source "$COLLECTOR_NAME/control-plane-metrics"
    terraform import sumologic_http_source.controller_metrics_source "$COLLECTOR_NAME/kube-controller-manager-metrics"
    terraform import sumologic_http_source.default_metrics_source "$COLLECTOR_NAME/(default-metrics)"
    terraform import sumologic_http_source.kubelet_metrics_source "$COLLECTOR_NAME/kubelet-metrics"
    terraform import sumologic_http_source.node_metrics_source "$COLLECTOR_NAME/node-exporter-metrics"
    terraform import sumologic_http_source.scheduler_metrics_source "$COLLECTOR_NAME/kube-scheduler-metrics"
    terraform import sumologic_http_source.state_metrics_source "$COLLECTOR_NAME/kube-state-metrics"
    terraform import sumologic_http_source.logs_source "$COLLECTOR_NAME/logs"
    terraform import sumologic_http_source.events_source "$COLLECTOR_NAME/events"
  
  
    # Kubernetes Namespace and Secret
    terraform import kubernetes_namespace.sumologic_collection_namespace $NAMESPACE
    terraform import kubernetes_secret.sumologic_collection_secret $NAMESPACE/sumologic
  
    terraform apply -auto-approve
  sumo-k8s.tf: |-
    variable "cluster_name" {
      type  = string
      default = "$CLUSTER_NAME"
    }
    variable "collector_name" {
      type  = string
      default = "$COLLECTOR_NAME"
    }
  
    variable "namespace_name" {
      type  = string
      default = "$NAMESPACE"
    }
  
    locals {
      apiserver_metrics_source                    = "apiserver-metrics"
      control_plane_metrics_source                = "control-plane-metrics"
      controller_metrics_source                   = "kube-controller-manager-metrics"
      default_metrics_source                      = "(default-metrics)"
      kubelet_metrics_source                      = "kubelet-metrics"
      node_metrics_source                         = "node-exporter-metrics"
      scheduler_metrics_source                    = "kube-scheduler-metrics"
      state_metrics_source                        = "kube-state-metrics"
      logs_source                                 = "logs"
      events_source                               = "events"
    }
  
    provider "sumologic" {}
  
    resource "sumologic_collector" "collector" {
        name  = var.collector_name
        fields  = {
          cluster = var.cluster_name
        }
    }
    
    resource "sumologic_http_source" "apiserver_metrics_source" {
        name         = local.apiserver_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "control_plane_metrics_source" {
        name         = local.control_plane_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "controller_metrics_source" {
        name         = local.controller_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "default_metrics_source" {
        name         = local.default_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "kubelet_metrics_source" {
        name         = local.kubelet_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "node_metrics_source" {
        name         = local.node_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "scheduler_metrics_source" {
        name         = local.scheduler_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "state_metrics_source" {
        name         = local.state_metrics_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "logs_source" {
        name         = local.logs_source
        collector_id = "${sumologic_collector.collector.id}"
    }
    
    resource "sumologic_http_source" "events_source" {
        name         = local.events_source
        collector_id = "${sumologic_collector.collector.id}"
        category     = "${var.cluster_name}/${local.events_source}"
    }
  
    provider "kubernetes" {
    
        cluster_ca_certificate    = "${file("/var/run/secrets/kubernetes.io/serviceaccount/ca.crt")}"
        host                      = "https://kubernetes.default.svc"
        token                     = "${file("/var/run/secrets/kubernetes.io/serviceaccount/token")}"
    }
  
    resource "kubernetes_namespace" "sumologic_collection_namespace" {
      metadata {
        name = var.namespace_name
      }
    }
  
    resource "kubernetes_secret" "sumologic_collection_secret" {
      metadata {
        name = "sumologic"
        namespace = var.namespace_name
      }
  
      data = {
        endpoint-metrics-apiserver                = "${sumologic_http_source.apiserver_metrics_source.url}"
        endpoint-control_plane_metrics_source     = "${sumologic_http_source.control_plane_metrics_source.url}"
        endpoint-metrics-kube-controller-manager  = "${sumologic_http_source.controller_metrics_source.url}"
        endpoint-metrics                          = "${sumologic_http_source.default_metrics_source.url}"
        endpoint-metrics-kubelet                  = "${sumologic_http_source.kubelet_metrics_source.url}"
        endpoint-metrics-node-exporter            = "${sumologic_http_source.node_metrics_source.url}"
        endpoint-metrics-kube-scheduler           = "${sumologic_http_source.scheduler_metrics_source.url}"
        endpoint-metrics-kube-state               = "${sumologic_http_source.state_metrics_source.url}"
        endpoint-logs                             = "${sumologic_http_source.logs_source.url}"
        endpoint-events                           = "${sumologic_http_source.events_source.url}"
      }
  
      type = "Opaque"
    }
  

---
# Source: sumologic/templates/setup/setup-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name:  collection-sumologic-setup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "0"
    
  labels:
    app: collection-sumologic
    

---
# Source: sumologic/templates/setup/setup-clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name:  collection-sumologic-setup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "1"
    
  labels:
    app: collection-sumologic
    
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - namespaces
    verbs: ["get", "create", "describe", "patch"]

---
# Source: sumologic/templates/setup/setup-clusterrolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  collection-sumologic-setup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "2"
    
  labels:
    app: collection-sumologic
    
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: collection-sumologic-setup
subjects:
  - kind: ServiceAccount
    name: collection-sumologic-setup
    namespace: $NAMESPACE

---
# Source: sumologic/templates/setup/setup-job.yaml

apiVersion: batch/v1
kind: Job
metadata:
  name: collection-sumologic-setup
  namespace: $NAMESPACE
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "3"
    
  labels:
    app: collection-sumologic
    
spec:
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: collection-sumologic-setup
      volumes:
      - name: setup
        configMap:
          name: collection-sumologic-setup
          defaultMode: 0777
      containers:
      - name: setup
        image: sumologic/kubernetes-fluentd:1.0.0
        imagePullPolicy: IfNotPresent
        command: ["/etc/terraform/setup.sh"]
        volumeMounts:
        - name: setup
          mountPath: /etc/terraform
        env:
        - name: SUMOLOGIC_ACCESSID
          value: $SUMOLOGIC_ACCESSID
        - name: SUMOLOGIC_ACCESSKEY
          value: $SUMOLOGIC_ACCESSKEY
        - name: SUMOLOGIC_BASE_URL
          value: 
        - name: HTTP_PROXY
          value: 
        - name: HTTPS_PROXY
          value: 
        

