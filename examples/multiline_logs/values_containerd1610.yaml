fluent-bit:
  luaScripts:
    script.lua: |
      function dump(o, indent)
        if type(o) == 'table' then
          local s = ''
          for k,v in pairs(o) do
            if type(k) ~= 'number' then k = '"' .. k .. '"' end
            s = s .. indent .. k .. ': '
            if type(v) == 'table' then
              local st = dump(v, indent .. ' ')
              if string.len(st) > 0 then
                s = s .. '\n' .. st
              end
            else
              s = s .. dump(v, indent) .. '\n'
            end
          end
          return s
        else
          return tostring(o)
        end
      end

      local function lines(str)
        local result = {}
        for line in str:gmatch '[^\n]+' do
          table.insert(result, line)
        end
        return result
      end

      local function split(s, delimiter)
        result = {};
        for match in (s..delimiter):gmatch("(.-)"..delimiter) do
            table.insert(result, match);
        end
        return result;
      end

      function get_log_content(line)
        table.remove(line, 1)
        table.remove(line, 1)
        table.remove(line, 1)
        return table.concat(line, " ")
      end

      function parse_log(tag, timestamp, record)
        if record['log'] == nil or record["stream"] == nil or record["logtag"] == nil then
          record = nil
          print("incorrect log format")
          print(dump(record, ''))
          return 1, 0, record
        end

        log_lines = lines(record['log'])

        fake_date = "2021-12-17T11:38:47.982584219Z"
        first_line = fake_date .. ' ' .. record["stream"] .. ' ' .. record["logtag"] .. ' ' .. log_lines[1]
        log_lines[1] = first_line

        new_lines = {}
        buffer = ""

        for k, v in pairs(log_lines) do
          line = split(v, ' ')
          log_tag = line[3]
          
          if log_tag == 'P' then
              buffer = buffer .. get_log_content(line)
              --print(buffer)
          else
              buffer = buffer .. get_log_content(line)
              table.insert(new_lines, buffer)
              -- print(buffer)
              buffer = ""
          end
        end
        
        new_log = table.concat(new_lines, "\n")
        record['log'] = new_log
        -- print("--------------------------------------------------------")
        -- print(dump(record, ''))
        -- print("--------------------------------------------------------")
        return 1, timestamp, record
      end
  config:
    ## https://docs.fluentbit.io/manual/service
    service: |
      [SERVICE]
          Flush        1
          Daemon       Off
          Log_Level    info
          Parsers_File parsers.conf
          Parsers_File custom_parsers.conf
          HTTP_Server  On
          HTTP_Listen  0.0.0.0
          HTTP_Port    2020
    ## https://docs.fluentbit.io/manual/pipeline/inputs
    ## ref: https://github.com/SumoLogic/sumologic-kubernetes-collection/blob/main/deploy/docs/ContainerLogs.md
    inputs: |
      [INPUT]
          Name                tail
          Path                /var/log/containers/example-pod-multiline-logs*.log
          Read_from_head      true
          # Parser              containerd
          Multiline           On
          Parser_Firstline    containerd_multiline_pattern
          Multiline_Flush     600
          Tag                 containers.*
          Refresh_Interval    1
          Rotate_Wait         60
          Mem_Buf_Limit       100MB
          Skip_Long_Lines     On
          DB                  /tail-db/tail-containers-state-sumo.db
          DB.Sync             Normal
      [INPUT]
          Name            systemd
          Tag             host.*
          DB              /tail-db/systemd-state-sumo.db
          Systemd_Filter  _SYSTEMD_UNIT=addon-config.service
          Systemd_Filter  _SYSTEMD_UNIT=addon-run.service
          Systemd_Filter  _SYSTEMD_UNIT=cfn-etcd-environment.service
          Systemd_Filter  _SYSTEMD_UNIT=cfn-signal.service
          Systemd_Filter  _SYSTEMD_UNIT=clean-ca-certificates.service
          Systemd_Filter  _SYSTEMD_UNIT=containerd.service
          Systemd_Filter  _SYSTEMD_UNIT=coreos-metadata.service
          Systemd_Filter  _SYSTEMD_UNIT=coreos-setup-environment.service
          Systemd_Filter  _SYSTEMD_UNIT=coreos-tmpfiles.service
          Systemd_Filter  _SYSTEMD_UNIT=dbus.service
          Systemd_Filter  _SYSTEMD_UNIT=docker.service
          Systemd_Filter  _SYSTEMD_UNIT=efs.service
          Systemd_Filter  _SYSTEMD_UNIT=etcd-member.service
          Systemd_Filter  _SYSTEMD_UNIT=etcd.service
          Systemd_Filter  _SYSTEMD_UNIT=etcd2.service
          Systemd_Filter  _SYSTEMD_UNIT=etcd3.service
          Systemd_Filter  _SYSTEMD_UNIT=etcdadm-check.service
          Systemd_Filter  _SYSTEMD_UNIT=etcdadm-reconfigure.service
          Systemd_Filter  _SYSTEMD_UNIT=etcdadm-save.service
          Systemd_Filter  _SYSTEMD_UNIT=etcdadm-update-status.service
          Systemd_Filter  _SYSTEMD_UNIT=flanneld.service
          Systemd_Filter  _SYSTEMD_UNIT=format-etcd2-volume.service
          Systemd_Filter  _SYSTEMD_UNIT=kube-node-taint-and-uncordon.service
          Systemd_Filter  _SYSTEMD_UNIT=kubelet.service
          Systemd_Filter  _SYSTEMD_UNIT=ldconfig.service
          Systemd_Filter  _SYSTEMD_UNIT=locksmithd.service
          Systemd_Filter  _SYSTEMD_UNIT=logrotate.service
          Systemd_Filter  _SYSTEMD_UNIT=lvm2-monitor.service
          Systemd_Filter  _SYSTEMD_UNIT=mdmon.service
          Systemd_Filter  _SYSTEMD_UNIT=nfs-idmapd.service
          Systemd_Filter  _SYSTEMD_UNIT=nfs-mountd.service
          Systemd_Filter  _SYSTEMD_UNIT=nfs-server.service
          Systemd_Filter  _SYSTEMD_UNIT=nfs-utils.service
          Systemd_Filter  _SYSTEMD_UNIT=node-problem-detector.service
          Systemd_Filter  _SYSTEMD_UNIT=ntp.service
          Systemd_Filter  _SYSTEMD_UNIT=oem-cloudinit.service
          Systemd_Filter  _SYSTEMD_UNIT=rkt-gc.service
          Systemd_Filter  _SYSTEMD_UNIT=rkt-metadata.service
          Systemd_Filter  _SYSTEMD_UNIT=rpc-idmapd.service
          Systemd_Filter  _SYSTEMD_UNIT=rpc-mountd.service
          Systemd_Filter  _SYSTEMD_UNIT=rpc-statd.service
          Systemd_Filter  _SYSTEMD_UNIT=rpcbind.service
          Systemd_Filter  _SYSTEMD_UNIT=set-aws-environment.service
          Systemd_Filter  _SYSTEMD_UNIT=system-cloudinit.service
          Systemd_Filter  _SYSTEMD_UNIT=systemd-timesyncd.service
          Systemd_Filter  _SYSTEMD_UNIT=update-ca-certificates.service
          Systemd_Filter  _SYSTEMD_UNIT=user-cloudinit.service
          Systemd_Filter  _SYSTEMD_UNIT=var-lib-etcd2.service
          Max_Entries     1000
          Read_From_Tail  true
    ## NOTE: Requires trailing "." for fully-qualified name resolution
    outputs: |
      [OUTPUT]
          Name          forward
          Match         *
          Host          ${FLUENTD_LOGS_SVC}.${NAMESPACE}.svc.cluster.local.
          Port          24321
          Retry_Limit   False
          tls           off
          tls.verify    on
          tls.debug     1
          # Disable keepalive for better load balancing
          net.keepalive off
    customParsers: |
      [PARSER]
          Name        multi_line
          Format      regex
          Regex       (?<log>^{"log":"\[?\d{4}-\d{1,2}-\d{1,2}.\d{2}:\d{2}:\d{2}.*)
      [PARSER]
          Name         crio
          Format       regex
          Regex        ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$
          Time_Key     time
          Time_Format  %Y-%m-%dT%H:%M:%S.%L%z
      [PARSER]
          Name         containerd
          Format       regex
          Regex        ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$
          Time_Key     time
          Time_Format  %Y-%m-%dT%H:%M:%S.%LZ
      [PARSER]
          Name         containerd_multiline_pattern
          Format       regex
          Regex        (?<time>^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[.]\d+Z) (?<stream>stdout|stderr) (?<logtag>[P|F]) (?<log>\w+ \d+ \d{2}:\d{2}:\d{2} .*)
          Time_Key     time
          Time_Format  %Y-%m-%dT%H:%M:%S.%LZ
      [MULTILINE_PARSER]
          Name          multiline_stacktrace
          Type          regex
          Flush_timeout 1000
          # Regex rules for multiline parsing
          # ---------------------------------
          #
          # configuration hints:
          #
          #  - first state always has the name: start_state
          #  - every field in the rule must be inside double quotes
          #
          # rules   |   state name   | regex pattern                   | next state name
          # --------|----------------|--------------------------------------------------
          Rule         "start_state"   "/^\w+ \d+ \d+\:\d+\:\d+ .*/"  "cont"
          Rule         "cont"          "/^.*/"                     "cont"
    filters: |
      [FILTER]
          Name    lua
          Match   containers.*
          script  /fluent-bit/scripts/script.lua
          call    parse_log
      # [FILTER]
      #     name             stdout
      #     match            containers.*


fluentd:
  logs:
    containers:
      multiline:
        enabled: false
