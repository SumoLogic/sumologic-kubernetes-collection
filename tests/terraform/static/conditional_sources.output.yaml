---
# Source: sumologic/templates/setup/setup-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name:  RELEASE-NAME-sumologic-setup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "2"
  labels:
    app: RELEASE-NAME-sumologic
    chart: "sumologic-1.0.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
data:
  setup.sh: |-
    #!/bin/sh
    cp /etc/terraform/sumo-k8s.tf /terraform
    cd /terraform
  
    # Fix URL to remove "v1" or "v1/"
    export SUMOLOGIC_BASE_URL=${SUMOLOGIC_BASE_URL%v1*}
  
    # Support proxy for terraform
    export HTTP_PROXY=${HTTP_PROXY:=""}
    export HTTPS_PROXY=${HTTPS_PROXY:=""}
  
    COLLECTOR_NAME=kubernetes
  
    terraform init
  
    # Sumo Collector and HTTP sources
    terraform import sumologic_collector.collector "$COLLECTOR_NAME"
  
  
    # Kubernetes Namespace and Secret
    terraform import kubernetes_namespace.sumologic_collection_namespace default
    terraform import kubernetes_secret.sumologic_collection_secret default/sumologic
  
    terraform apply -auto-approve
  sumo-k8s.tf: |-
    variable "cluster_name" {
      type  = string
      default = "kubernetes"
    }
    variable "collector_name" {
      type  = string
      default = "kubernetes"
    }
  
    variable "namespace_name" {
      type  = string
      default = "default"
    }
  
    locals {
    }
  
    provider "sumologic" {}
  
    resource "sumologic_collector" "collector" {
        name  = var.collector_name
        fields  = {
          cluster = var.cluster_name
        }
    }
  
    provider "kubernetes" {
    
        cluster_ca_certificate    = "${file("/var/run/secrets/kubernetes.io/serviceaccount/ca.crt")}"
        host                      = "https://kubernetes.default.svc"
        token                     = "${file("/var/run/secrets/kubernetes.io/serviceaccount/token")}"
    }
  
    resource "kubernetes_namespace" "sumologic_collection_namespace" {
      metadata {
        name = var.namespace_name
      }
    }
  
    resource "kubernetes_secret" "sumologic_collection_secret" {
      metadata {
        name = "sumologic"
        namespace = var.namespace_name
      }
  
      data = {
      }
  
      type = "Opaque"
    }
