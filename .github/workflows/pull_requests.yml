name: PRs checks

on:
  pull_request:
    branches:
      - main
      - 'release-v[0-9]+.[0-9]+'

jobs:
  markdownlint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: install markdownlint
        run: npm install -g markdownlint-cli
      - name: markdownlint check
        run: make markdownlint

  shellcheck:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: install shellcheck
        run: |
            curl --retry 10 --retry-max-time 120 --retry-delay 5 -Lo- https://github.com/koalaman/shellcheck/releases/download/v0.7.1/shellcheck-v0.7.1.linux.x86_64.tar.xz | tar -xJf -
            sudo cp shellcheck-v0.7.1/shellcheck /usr/local/bin && rm -rf shellcheck-v0.7.1
      - name: shellcheck
        run: make shellcheck

  yamllint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: install yamllint
        run: pip install yamllint
      - name: yamllint
        run: make yamllint

  helmlint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Lint helm chart
        run: |
          make helm-dependency-update
          make helm-lint

  markdown-link-check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: '.markdown_link_check.json'

  md-links-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Lint markdown links
        run: |
          make markdown-links-lint

  markdown-table-formatter-check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.1.0
      - name: Install markdown-table-formatter
        run: npm install markdown-table-formatter --save
      - name: Run markdown-table-formatter
        run: CMD=./node_modules/.bin/markdown-table-formatter make markdown-table-formatter-check

  milestone:
    runs-on: ubuntu-20.04
    steps:
    - name: Check if milestone is set
      uses: actions/github-script@v6
      with:
        script: |
          const pr = context.payload.pull_request;
          if (pr.milestone) {
            core.info(`This pull request has a milestone set: ${pr.milestone.title}`);
          } else {
            core.setFailed("A maintainer needs to set the milestone for this pull request.");
          }

  test:
    runs-on: ubuntu-20.04
    env:
      YQ_VERSION: 3.4.1
    needs:
      - shellcheck
      - yamllint
      - helmlint
    steps:
      - uses: actions/checkout@v3
      - name: yq
        run: |
            curl --retry 10 --retry-max-time 120 --retry-delay 5 -L -o /tmp/yq https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64
            chmod +x /tmp/yq
            sudo mv /tmp/yq /usr/local/bin/yq
      - name: test
        run: make test

  ##############################################################################
  # Integration tests
  ##############################################################################

  setup-integration-tests:
    runs-on: ubuntu-20.04
    outputs:
      kind_images: ${{ steps.set_kind_images.outputs.kind_images }}
      test_names: ${{ steps.set_test_names.outputs.test_names }}
    steps:
      - uses: actions/checkout@v3
      - id: set_kind_images
        name: Set kind images
        working-directory: ./tests/integration/
        run: |
          echo "::set-output name=kind_images::$(jq -cM '.supported' kind_images.json)"
      - name: Print kind images
        run: echo "Kind images ${{ steps.set_kind_images.outputs.kind_images }}"
      - id: set_test_names
        name: Set test names
        working-directory: ./tests/integration/
        # grep magic described in https://unix.stackexchange.com/a/13472
        run: |
          echo "::set-output name=test_names::$(grep -shoP "(?<=^func )(Test[a-zA-z_0-9]+)(?=\(t \*testing.T\) {)" * | jq -R . | jq -cs .)"
      - name: Print test names
        run: echo "Test names ${{ steps.set_test_names.outputs.test_names }}"

  lint-integration-tests:
    name: Lint integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.17.7'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          working-directory: ./tests/integration/
          # Optional: golangci-lint command line arguments.
          args: --timeout=10m --verbose

  integration-tests:
    runs-on: ubuntu-20.04
    name: IT - ${{ matrix.test_name }} - ${{ matrix.kind_image }}
    needs:
      - setup-integration-tests
    strategy:
      matrix:
        kind_image: ${{ fromJSON(needs.setup-integration-tests.outputs.kind_images) }}
        test_name: ${{ fromJSON(needs.setup-integration-tests.outputs.test_names) }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17.7'
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.12.0
          # Cluster will be created by the tests themselves so no need to create it here.
          skipClusterCreation: "true"
      # As described in
      # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v3
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: ${{ runner.os }}-go-integration-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-integration-
      - name: Run integration test - ${{ matrix.test_name }}
        working-directory: ./tests/integration/
        run: make test TEST_NAME=${{matrix.test_name}} KIND_NODE_IMAGE=${{matrix.kind_image}}
